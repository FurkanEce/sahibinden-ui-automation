Sahibinden UI Automation

Bu proje, Sahibinden web uygulaması için UI testlerini otomatikleştirmek amacıyla oluşturulmuş bir otomasyon framework'üdür. Projede JUnit 5, Selenium, Allure ve Docker kullanılarak test süreçleri optimize edilmiştir.

📂 Proje Yapısı


sahibinden-ui-automation/
├── src/
│   ├── main/
│   │   ├── resources/                          # Uygulama kaynak dosyaları
│   └── test/
│       ├── java/
│       │   ├── com.sahibinden.config/         # WebDriver ve Selenoid konfigürasyonu
│       │   ├── com.sahibinden.pages/          # Page Object Model sınıfları
│       │   ├── com.sahibinden.tests/          # Test sınıfları
│       │   ├── com.sahibinden.base/           # Temel yapı ve yardımcı sınıflar
│       └── resources/                         # Test kaynak dosyaları
├── allure-report/                             # Allure raporlarının oluşturulduğu dizin
├── allure-results/                            # Allure test sonuçlarının tutulduğu dizin
├── config/                                    # Selenoid için tarayıcı konfigürasyonları (browsers.json)
├── .mvn/                                      # Maven Wrapper için gerekli dosyalar
├── .gitattributes                             # Git için dosya özellikleri ayarları
├── .gitignore                                 # Git tarafından yok sayılacak dosyalar
├── DockerFile                                 # Docker imajını oluşturmak için yapılandırma dosyası
├── Jenkinsfile                                # Jenkins pipeline yapılandırma dosyası
├── docker-compose.yaml                        # Docker Compose yapılandırma dosyası
├── mvnw                                       # Maven Wrapper (Linux/Mac)
├── mvnw.cmd                                   # Maven Wrapper (Windows)
├── pom.xml                                    # Maven bağımlılıkları ve yapılandırma
└── README.md                                  # Proje dokümantasyonu


🚀 Kullanılan Teknolojiler

- sProgramlama Dili: Java 17+
- Test Framework: JUnit 5
- Otomasyon Aracı: Selenium WebDriver
- Raporlama Aracı: Allure
- Tarayıcı Yönetimi: Selenoid
- Bağımlılık Yönetimi: Maven
- CI/CD: Jenkins
- Konteyner Yönetimi: Docker & Docker Compose

---

🛠 Kurulum ve Çalıştırma Adımları

1️⃣ Gereksinimler

Projenin çalışması için aşağıdaki bağımlılıkların yüklü olması gerekmektedir:

- [Java 17](https://adoptium.net/)
- [Maven](https://maven.apache.org/download.cgi)
- [Docker](https://docs.docker.com/get-docker/)
- [Docker Compose](https://docs.docker.com/compose/install/)
- [Allure Commandline](https://docs.qameta.io/allure/)

---

2️⃣ Projenin Klonlanması

Öncelikle projeyi yerel makinenize klonlayın:

git clone https://github.com/kullanici_adi/sahibinden-ui-automation.git
cd sahibinden-ui-automation

---

3️⃣ Bağımlılıkların Yüklenmesi

Maven kullanarak bağımlılıkları yükleyin:

mvn clean install

---

4️⃣ Docker Servislerini Başlatma

Selenoid ve Jenkins servislerini başlatmak için aşağıdaki komutu çalıştırın:

docker-compose up -d

Servislerin çalıştığını doğrulamak için:

- Selenoid → [http://localhost:4444](http://localhost:4444)
- Selenoid-UI → [http://localhost:8081](http://localhost:8081)
- Jenkins → [http://localhost:8080](http://localhost:8080)

---

5️⃣ Testlerin Çalıştırılması

Tüm testleri çalıştırmak için:

- mvn test

Belli bir test sınıfını çalıştırmak için:

- mvn -Dtest=LandingPageTest test

Test sonuçları allure-results/ dizininde oluşturulacaktır.

---

6️⃣ Allure Raporlarının Oluşturulması

📌 Geçici Olarak Raporu Görüntüleme

allure serve allure-results

📌 Statik Rapor Oluşturma

allure generate allure-results -o allure-report --clean

Raporlar allure-reports/ dizininde oluşturulacaktır.

---

📌 Proje Detayları

✅ 1. Testler
Testler `com.sahibinden.tests` paketi içinde bulunur.

|   Test Sınıfı        |  Açıklama   |
|----------------------|-------------|
| `LandingPageTest.java`  | Landing Page sayfasındaki fiyat sıralama ve filtreleme işlemlerini test eder. |
| `YepyPageTest.java`  | Yepy sayfasını test eder. |

---

✅ 2. Page Object Model (POM)
Tüm sayfa nesneleri `com.sahibinden.pages` dizininde bulunur.

| Sayfa Nesnesi    | Açıklama |
|------------------|-------------|
| `HomePage.java`  | Ana sayfa işlemleri |
| `NewlyPhoneLandingPage.java` | Yenilenmiş Telefon sayfası işlemleri |
| `YepyPage.java`| Yepy sayfası işlemleri |

---

✅ 3. Konfigürasyon

|   Dosya              | Açıklama    |
|----------------------|-------------|
| `WebDriverConfig.java` | WebDriver ve Selenoid yapılandırması |
| `browsers.json`       | Selenoid için tarayıcı konfigürasyonları |

---

✅ 4. Docker Compose

docker-compose.yaml dosyası, aşağıdaki servisleri içerir:

|   Servis       |   Açıklama |
|----------------|-------------|
|   Selenoid     | Tarayıcı testlerini çalıştırır |
|   Selenoid-UI  | Web arayüzü sağlar |
|   Jenkins      | CI/CD işlemleri için |

---

✅ 5. Kullanılan Docker İmajları

| Servis         |   Docker İmajı |
|----------------|----------------|
|   Selenoid     | `aerokube/selenoid:latest-release` |
|   Selenoid-UI  | `aerokube/selenoid-ui:latest-release` |
|   Jenkins      | `jenkins/jenkins:lts` |

---

📊 Raporlama

Allure test sonuçlarını görselleştirmek için kullanılır.

|   Klasör         |   Açıklama  |
|------------------|-------------|
| `allure-results/` | Test sonuçlarının ham verileri |
| `allure-report/`  | Statik HTML raporları |

---

📧 İletişim için: furkanece99@gmail.com

